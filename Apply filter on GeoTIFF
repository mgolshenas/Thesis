import numpy as np
import rasterio
from rasterio.enums import Resampling
import os
import gc
import dask.array as da #To use less memory

# Import the 'fourier_concentric_zone_filter' function from 'fourier_zone_filter.py'
from fourier_zone_filter import fourier_concentric_zone_filter

  
# --- Main part: Load GeoTIFF, Apply Filters, Save Outputs ---

# Path to your input GeoTIFF
input_path = r"C:\Users\M\Downloads\o41078a5.tif"
input_path = input_path.encode('ascii', 'ignore').decode()

# Output folder to save results
output_folder = r"C:\Users\M\Downloads\Output"
os.makedirs(output_folder, exist_ok=True)


# Automatically generate all 4-digit binary zone codes (from 0001 to 1111, excluding 0000)
zone_codes = [format(i, '04b') for i in range(1, 16)]

# Open input GeoTIFF
with rasterio.open(input_path) as src:
    # Read the first band
    image = src.read(1)

    for zone_code in zone_codes:
        # Apply the Fourier filter
        filtered_img = fourier_concentric_zone_filter(image, zone_code)

        # Output filename
        output_path = os.path.join(output_folder, f"filtered_img_{zone_code}.tif")

        # Save the result as GeoTIFF
        profile.update(
        dtype=rasterio.float32,  # or uint16, if values are integers < 65535
        count=1,
        compress='lzw'  # or 'deflate'
        )

 # Open compressed file and uncompress
#with rasterio.open("compressed.tif") as src:
    #data = src.read()
    #profile = src.profile.copy()
    #profile.update(compress=None)  # remove compression

# Save uncompressed
#with rasterio.open("uncompressed.tif", "w", **profile) as dst:
    #dst.write(data)
       

        with rasterio.open(output_path, 'w', **profile) as dst:
            dst.write(filtered_img, 1)

            print(f"Saved: {output_path}")
   
    


    
