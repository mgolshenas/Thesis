import numpy as np
import skimage.io as io
import matplotlib.pyplot as plt
from skimage import data

# Define the Concentric Fourier Zone Filter function
def fourier_concentric_zone_filter(image, zone_code):
    """
    Applies a custom Fourier filter based on concentric frequency zones.

    Parameters:
    - image: 2D grayscale image (NumPy array)
    - zone_code: String like '1010' (keep zones where value is '1')

    Returns:
    - Filtered image (NumPy array)
    - Filtered spectrum (log-magnitude, uint8 for display)
    """
    zone_code = str(zone_code)
    num_zones = len(zone_code)

    img = image.astype(np.float32)
    rows, cols = img.shape
    cx, cy = cols // 2, rows // 2

    # FFT and shift
    f = np.fft.fft2(img)
    fshift = np.fft.fftshift(f)

    # Create meshgrid of distances from center
    y, x = np.ogrid[:rows, :cols]
    distance = np.sqrt((x - cx)**2 + (y - cy)**2)
    max_radius = np.max(distance)

    # Define zone thresholds
    thresholds = [max_radius * i / num_zones for i in range(num_zones + 1)]

    # Create mask
    mask = np.zeros_like(img, dtype=np.float32)
    for i in range(num_zones):
        if zone_code[i] == '1':
            mask[(distance >= thresholds[i]) & (distance < thresholds[i + 1])] = 1

    # Apply filter in frequency domain
    fshift_filtered = fshift * mask

    # Create log-magnitude spectrum for visualization
    spectrum = np.log(1 + np.abs(fshift_filtered)) # use log to compress the huge range of values in the spectrum so itâ€™s visible
    spectrum = 255 * (spectrum - spectrum.min()) / (np.ptp(spectrum) + 1e-8) #normalizing the image 
   #1e-8 to avoid dividing by zero in case the image has no variation (e.g., it's all black or white).
    spectrum = spectrum.astype(np.uint8)

    # Inverse FFT to reconstruct image
    f_ishift = np.fft.ifftshift(fshift_filtered)
    img_back = np.fft.ifft2(f_ishift)
    img_back = np.abs(img_back)
    img_back = 255 * (img_back - img_back.min()) / (np.ptp(img_back) + 1e-8) #ptp(peak to peak)img_back.max() - img_back.min()
    img_back = img_back.astype(np.float32)

    return img_back, spectrum


# Load a sample image 
image = data.astronaut()  # Example image from skimage 

# Convert to grayscale (mean of RGB channels)
image_gray = np.mean(image, axis=2).astype(np.float32)

# Define the zone code (e.g., '1010' to keep zones 1 and 3)
zone_code = '1010'

# Apply the Fourier zone filter
filtered_image, filtered_spectrum = fourier_concentric_zone_filter(image_gray, zone_code)

# Create distance grid outside the function
rows, cols = image_gray.shape
cx, cy = cols // 2, rows // 2
y, x = np.ogrid[:rows, :cols]
distance = np.sqrt((x - cx)**2 + (y - cy)**2)
max_radius = np.max(distance)

# Define zone thresholds
num_zones = len(zone_code)
thresholds = [max_radius * i / num_zones for i in range(num_zones + 1)]

# Create zone mask for visualization
zone_mask_visual = np.zeros_like(image_gray, dtype=np.float32)
for i in range(num_zones):
    if zone_code[i] == '1':
        zone_mask_visual[(distance >= thresholds[i]) & (distance < thresholds[i + 1])] = int(255 * (i + 1) / num_zones)




# Visualize zone mask 
zone_mask_visual = np.zeros_like(image_gray, dtype=np.float32)
for i in range(len(zone_code)):
    if zone_code[i] == '1':
        zone_mask_visual[(distance >= thresholds[i]) & (distance < thresholds[i + 1])] = int(255 * (i + 1) / len(zone_code))

# Add the zone mask to the plot
fig, ax = plt.subplots(1, 3, figsize=(18, 6))

# Original image
ax[0].imshow(image_gray, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

# Filtered image
ax[1].imshow(filtered_image, cmap='gray')
ax[1].set_title('Filtered Image')
ax[1].axis('off')

# Filtered frequency spectrum
#ax[2].imshow(filtered_spectrum, cmap='gray')
#ax[2].set_title('Filtered Frequency Spectrum')
#ax[2].axis('off')

# Zone Mask Visualization
ax[2].imshow(zone_mask_visual, cmap='gray')
ax[2].set_title(f'Zone Mask ({zone_code})')
ax[2].axis('off')

plt.tight_layout()
plt.show()
