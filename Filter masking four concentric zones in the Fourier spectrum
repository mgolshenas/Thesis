import numpy as np
import skimage.io as io
import matplotlib.pyplot as plt
from skimage import data

# Define the Fourier Zone Filter function (from earlier)

def fourier_concentric_zone_filter(image, zone_code):
    """
    Applies a custom Fourier filter based on concentric frequency zones.
    
    Parameters:
    - image: 2D grayscale image (NumPy array)
    - zone_code: String like '1010' (keep zones where value is '1')
    
    Returns:
    - Filtered image (NumPy array)
    """
    zone_code = str(zone_code)
    num_zones = len(zone_code)

    img = image.astype(np.float32)
    rows, cols = img.shape
    cx, cy = cols // 2, rows // 2

    # FFT and shift
    f = np.fft.fft2(img)
    fshift = np.fft.fftshift(f)

    # Create meshgrid of distances from center
    y, x = np.ogrid[:rows, :cols]
    distance = np.sqrt((x - cx)**2 + (y - cy)**2)
    max_radius = np.max(distance)

    # Define zone thresholds
    thresholds = [max_radius * i / num_zones for i in range(num_zones + 1)]

    # Create mask
    mask = np.zeros_like(img, dtype=np.uint8)
    for i in range(num_zones):
        if zone_code[i] == '1':
            mask[(distance >= thresholds[i]) & (distance < thresholds[i + 1])] = 1

    # Apply filter
    fshift_filtered = fshift * mask

    # Inverse FFT
    f_ishift = np.fft.ifftshift(fshift_filtered)
    img_back = np.fft.ifft2(f_ishift)
    img_back = np.abs(img_back)

    return img_back.astype(np.uint8)


# Load a sample image 
image = data.astronaut()  # Example image from skimage 

# Convert to grayscale (mean of RGB channels)
image_gray = np.mean(image, axis=2).astype(np.uint8)

# Define the zone code (e.g., '1010' to keep zones 1 and 3)
zone_code = '1010'

# Apply the Fourier zone filter
filtered_image = fourier_concentric_zone_filter(image_gray, zone_code)

# Display the original and filtered images
fig, ax = plt.subplots(1, 2, figsize=(12, 6)) #means the figure will have a width of 12 inches and a height of 6 inches

# Original image
ax[0].imshow(image_gray, cmap='gray')
ax[0].set_title('Original Image')
ax[0].axis('off')

# Filtered image
ax[1].imshow(filtered_image, cmap='gray')
ax[1].set_title('Filtered Image')

plt.show()
